// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  USER
}


enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String   @unique
  password  String
  role Role @default(USER)
  defaultShippingAddress String?
  defaultBillingAddress String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

    addresses Address[]
    carditem CartItem[]
    order Order[]
}



model Product {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  price Int
  tags String
   createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  carditem CartItem[]
  ordres OrderProduct[]

}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  lineone   String
  city      String
  country   String
  pincode   String
  userId   String @db.ObjectId
  user      User     @relation(fields: [userId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt



}


model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


model Order {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  netAmount Int
  address String
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products OrderProduct[]
  event OrderEvent[]
}


model OrderProduct {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model OrderEvent {
   id   String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}